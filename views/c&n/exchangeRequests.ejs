<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Exchange Requests</title>
    <script src="https://unpkg.com/@solana/web3.js@latest/lib/index.iife.min.js"></script>
    <style>
        body {
            margin: 0;
            font-family: 'Arial';
        }

        /* Sidebar styles */
        .sidebar {
            height: 100%;
            width: 250px;
            position: fixed;
            top: 0;
            left: 0;
            background-color: #f8f9fa;
            padding-top: 3rem;
            overflow-y: auto;
            z-index: 1;
        }

        .sidebar-nav-link {
            padding: 10px;
            color: #000;
            text-decoration: none;
            display: block;
        }

        .sidebar-nav-link:hover {
            background-color: #e9ecef;
        }

        .sidebar-brand {
            padding: 20px;
            font-weight: bold;
            color: #000;
            text-decoration: none;
        }

        /* Center content */
        .content {
            display: flex;
            flex-direction: column;
            height: 100vh;
            margin-left: 250px;
            padding: 20px;
        }

        /* Style for table */
        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th,
        td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #f2f2f2;
        }

        /* Style for buttons */
        button {
            padding: 5px 10px;
        }

        .transaction-link {
            display: block;
            padding: 10px;
            color: #000;
            text-decoration: none;
            margin-right: 975px;
            text-align: center;
            border-radius: 5px;
        }
    </style>
</head>

<body>
    <div class="sidebar">
        <div class="sidebar-nav-link active">
            <div style="width: 100px; height: 100px; overflow: hidden; border-radius: 50%; margin-bottom: 10px;">
                <img src="<%= user.avatar %>" alt="User Avatar" style="width: 100%; height: auto;">
            </div>
            <p style="margin-bottom: 1em;">
                <%= user.email %>
            </p>
        </div>

        <a href="https://tt-sp24.onrender.com/question" class="sidebar-nav-link active">Quản lý câu hỏi</a>
        <a href="https://tt-sp24.onrender.com/category" class="sidebar-nav-link">Danh sách thể loại </a>
        <a href="https://tt-sp24.onrender.com/test" class="sidebar-nav-link">Quản lý quizz </a>
        <a href="https://tt-sp24.onrender.com/nft" class="sidebar-nav-link">NFTs</a>
        <a href="https://tt-sp24.onrender.com/api/notf/confirm" class="sidebar-nav-link">Quản lý đổi thưởng</a>
        <a href="https://tt-sp24.onrender.com/api/notf/confirmH" class="sidebar-nav-link">Lịch sử xác nhận</a>

    </div>
    <div class="content">
        <h1 style="display: flex; justify-content: center; align-items: center; margin-right: 122px;">Xác nhận yêu cầu đổi nfts</h1>
        <a href="https://shyft-insider.vercel.app/" target="_blank" class="transaction-link">Chi tiết giao dịch</a>
        <table>
            <thead>
                <tr>
                    <th>STT</th>
                    <th>WalletId</th>
                    <th>Token Address</th>
                    <th>Request Time</th>
                    <th>Action</th>
                </tr>
            </thead>
            <tbody>
                <% exchangeRequests.forEach((request, index) => { %>
                    <tr>
                        <td><%= index + 1 %></td>
                        <td><%= request.userId %></td>
                        <td><%= request.nftId %></td>
                        <td><%= request.requestTime %></td>
                        <td>
                            <form id="confirmForm_<%= request._id %>" action="/confirmExchange" method="post">
                                <input type="hidden" name="requestId" value="<%= request._id %>">
                                <% if (request.confirmed) { %>
                                    <span>Đã xác nhận</span>
                                <% } else { %>
                                    <button type="button" onclick="confirmExchange('<%= request._id %>', '<%= request.nftId %>', '<%= request.userId %>')">Confirm Exchange</button>
                                <% } %>
                            </form>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
        </table>
    </div>

    <script>
        const private_k = "LZ91L7MUzNhKsrwnLucoAQC1U4ZLnGrw5qNWQQmg7LzQcHX6XBAuwnxw4b4L61YiBSkGm7UWvEQt2rLNJRTc2vA";

        async function confirmExchange(requestId, nftId, userId) {
            var myHeaders = new Headers();
            myHeaders.append("x-api-key", "Z0s1HomCTG-Ppn--");
            myHeaders.append("Content-Type", "application/json");

            var raw = JSON.stringify({
                "network": "devnet",
                "token_address": nftId,
                "from_address": "9FWUokoE27tEtaxCvcUwQwQdtY5bbzcgqX7miKct1geS",
                "to_address": userId,
                "amount": 1,
                "fee_payer": "9FWUokoE27tEtaxCvcUwQwQdtY5bbzcgqX7miKct1geS",
                "priority_fee": 100
            });

            var requestOptions = {
                method: 'POST',
                headers: myHeaders,
                body: raw,
                redirect: 'follow'
            };

            try {
                const response = await fetch("https://api.shyft.to/sol/v1/nft/transfer_detach", requestOptions);
                const result = await response.text();
                console.log(result);
                alert('NFTs transferred successfully');

                signTransaction(result.result.encoded_transaction, private_k);

                const confirmResponse = await fetch("/api/notf/confirmExchange", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify({
                        requestId: requestId
                    })
                });

                const data = await confirmResponse.json();
                if (data.success) {
                    var form = document.getElementById("confirmForm_" + requestId);
                    form.innerHTML = "<span>Đã xác nhận</span>";
                } else {
                    alert(data.message);
                }
            } catch (error) {
                console.error("Error:", error);
                alert("Error during exchange confirmation");
            }
        }

        async function signTransaction(encodedTransaction, fromPrivateKey) {
            try {
                const connection = new solanaWeb3.Connection(solanaWeb3.clusterApiUrl("devnet"), 'confirmed');
                const feePayer = solanaWeb3.Keypair.fromSecretKey(private_k);
                const recoveredTransaction = getRawTransaction(encodedTransaction);
                if (recoveredTransaction instanceof solanaWeb3.VersionedTransaction) {
                    recoveredTransaction.sign([feePayer]);
                } else {
                    recoveredTransaction.partialSign(feePayer);
                }
                const txnSignature = await connection.sendRawTransaction(
                    recoveredTransaction.serialize(),
                );
                return txnSignature;
            } catch (error) {
                console.error("Error:", error);
                alert("Error signing transaction");
            }
        }

        function getRawTransaction(encodedTransaction) {
            let recoveredTransaction;
            try {
                recoveredTransaction = solanaWeb3.Transaction.from(
                    Buffer.from(encodedTransaction, 'base64')
                );
            } catch (error) {
                recoveredTransaction = solanaWeb3.VersionedTransaction.deserialize(
                    Buffer.from(encodedTransaction, 'base64')
                );
            }
            return recoveredTransaction;
        }
    </script>
</body>

</html>
